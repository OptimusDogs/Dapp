/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import {
  Signer,
  utils,
  BigNumberish,
  Contract,
  ContractFactory,
  Overrides,
} from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { ERC721A, ERC721AInterface } from "../ERC721A";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "name_",
        type: "string",
      },
      {
        internalType: "string",
        name: "symbol_",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "maxBatchSize_",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "collectionSize_",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "approved",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        indexed: false,
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "ApprovalForAll",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: true,
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "getApproved",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
    ],
    name: "isApprovedForAll",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextOwnerToExplicitlySet",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "ownerOf",
    outputs: [
      {
        internalType: "address",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
      {
        internalType: "bytes",
        name: "_data",
        type: "bytes",
      },
    ],
    name: "safeTransferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "operator",
        type: "address",
      },
      {
        internalType: "bool",
        name: "approved",
        type: "bool",
      },
    ],
    name: "setApprovalForAll",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "bytes4",
        name: "interfaceId",
        type: "bytes4",
      },
    ],
    name: "supportsInterface",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "index",
        type: "uint256",
      },
    ],
    name: "tokenOfOwnerByIndex",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "tokenURI",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "totalSupply",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "tokenId",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040525f80555f60075534801562000017575f80fd5b50604051620019e8380380620019e88339810160408190526200003a91620001f5565b5f8111620000a65760405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20636f6c6c656374696f6e206d757374206861766520612060448201526d6e6f6e7a65726f20737570706c7960901b60648201526084015b60405180910390fd5b5f8211620001075760405162461bcd60e51b815260206004820152602760248201527f455243373231413a206d61782062617463682073697a65206d757374206265206044820152666e6f6e7a65726f60c81b60648201526084016200009d565b6001620001158582620002f6565b506002620001248482620002f6565b5060a09190915260805250620003be9050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f8301126200015b575f80fd5b81516001600160401b038082111562000178576200017862000137565b604051601f8301601f19908116603f01168101908282118183101715620001a357620001a362000137565b81604052838152602092508683858801011115620001bf575f80fd5b5f91505b83821015620001e25785820183015181830184015290820190620001c3565b5f93810190920192909252949350505050565b5f805f806080858703121562000209575f80fd5b84516001600160401b038082111562000220575f80fd5b6200022e888389016200014b565b9550602087015191508082111562000244575f80fd5b5062000253878288016200014b565b604087015160609097015195989097509350505050565b600181811c908216806200027f57607f821691505b6020821081036200029e57634e487b7160e01b5f52602260045260245ffd5b50919050565b601f821115620002f1575f81815260208120601f850160051c81016020861015620002cc5750805b601f850160051c820191505b81811015620002ed57828155600101620002d8565b5050505b505050565b81516001600160401b0381111562000312576200031262000137565b6200032a816200032384546200026a565b84620002a4565b602080601f83116001811462000360575f8415620003485750858301515b5f19600386901b1c1916600185901b178555620002ed565b5f85815260208120601f198616915b8281101562000390578886015182559484019460019091019084016200036f565b5085821015620003ae57878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b60805160a051611604620003e45f395f8181610df30152610e1d01525f50506116045ff3fe608060405234801561000f575f80fd5b5060043610610106575f3560e01c80634f6ccce71161009e578063a22cb4651161006e578063a22cb46514610212578063b88d4fde14610225578063c87b56dd14610238578063d7224ba01461024b578063e985e9c514610254575f80fd5b80634f6ccce7146101d15780636352211e146101e457806370a08231146101f757806395d89b411461020a575f80fd5b806318160ddd116100d957806318160ddd1461018757806323b872dd146101985780632f745c59146101ab57806342842e0e146101be575f80fd5b806301ffc9a71461010a57806306fdde0314610132578063081812fc14610147578063095ea7b314610172575b5f80fd5b61011d610118366004611197565b61028f565b60405190151581526020015b60405180910390f35b61013a6102fb565b60405161012991906111ff565b61015a610155366004611211565b61038b565b6040516001600160a01b039091168152602001610129565b610185610180366004611243565b610418565b005b5f545b604051908152602001610129565b6101856101a636600461126b565b61052e565b61018a6101b9366004611243565b610539565b6101856101cc36600461126b565b6106a2565b61018a6101df366004611211565b6106bc565b61015a6101f2366004611211565b61071d565b61018a6102053660046112a4565b61072e565b61013a6107bd565b6101856102203660046112bd565b6107cc565b61018561023336600461130a565b61088f565b61013a610246366004611211565b6108c8565b61018a60075481565b61011d6102623660046113df565b6001600160a01b039182165f90815260066020908152604080832093909416825291909152205460ff1690565b5f6001600160e01b031982166380ac58cd60e01b14806102bf57506001600160e01b03198216635b5e139f60e01b145b806102da57506001600160e01b0319821663780e9d6360e01b145b806102f557506301ffc9a760e01b6001600160e01b03198316145b92915050565b60606001805461030a90611410565b80601f016020809104026020016040519081016040528092919081815260200182805461033690611410565b80156103815780601f1061035857610100808354040283529160200191610381565b820191905f5260205f20905b81548152906001019060200180831161036457829003601f168201915b5050505050905090565b5f610396825f541190565b6103fd5760405162461bcd60e51b815260206004820152602d60248201527f455243373231413a20617070726f76656420717565727920666f72206e6f6e6560448201526c3c34b9ba32b73a103a37b5b2b760991b60648201526084015b60405180910390fd5b505f908152600560205260409020546001600160a01b031690565b5f6104228261071d565b9050806001600160a01b0316836001600160a01b0316036104905760405162461bcd60e51b815260206004820152602260248201527f455243373231413a20617070726f76616c20746f2063757272656e74206f776e60448201526132b960f11b60648201526084016103f4565b336001600160a01b03821614806104ac57506104ac8133610262565b61051e5760405162461bcd60e51b815260206004820152603960248201527f455243373231413a20617070726f76652063616c6c6572206973206e6f74206f60448201527f776e6572206e6f7220617070726f76656420666f7220616c6c0000000000000060648201526084016103f4565b61052983838361099d565b505050565b6105298383836109f8565b5f6105438361072e565b821061059c5760405162461bcd60e51b815260206004820152602260248201527f455243373231413a206f776e657220696e646578206f7574206f6620626f756e604482015261647360f01b60648201526084016103f4565b5f80549080805b83811015610642575f818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff1691830191909152156105f557805192505b876001600160a01b0316836001600160a01b03160361062f57868403610621575093506102f592505050565b8361062b8161145c565b9450505b508061063a8161145c565b9150506105a3565b5060405162461bcd60e51b815260206004820152602e60248201527f455243373231413a20756e61626c6520746f2067657420746f6b656e206f662060448201526d0deeedccae440c4f240d2dcc8caf60931b60648201526084016103f4565b61052983838360405180602001604052805f81525061088f565b5f805482106107195760405162461bcd60e51b815260206004820152602360248201527f455243373231413a20676c6f62616c20696e646578206f7574206f6620626f756044820152626e647360e81b60648201526084016103f4565b5090565b5f61072782610d74565b5192915050565b5f6001600160a01b0382166107995760405162461bcd60e51b815260206004820152602b60248201527f455243373231413a2062616c616e636520717565727920666f7220746865207a60448201526a65726f206164647265737360a81b60648201526084016103f4565b506001600160a01b03165f908152600460205260409020546001600160801b031690565b60606002805461030a90611410565b336001600160a01b038316036108245760405162461bcd60e51b815260206004820152601a60248201527f455243373231413a20617070726f766520746f2063616c6c657200000000000060448201526064016103f4565b335f8181526006602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b61089a8484846109f8565b6108a684848484610f1a565b6108c25760405162461bcd60e51b81526004016103f490611474565b50505050565b60606108d4825f541190565b6109385760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b60648201526084016103f4565b5f61094d60408051602081019091525f815290565b90505f81511161096b5760405180602001604052805f815250610996565b8061097584611018565b6040516020016109869291906114c7565b6040516020818303038152906040525b9392505050565b5f8281526005602052604080822080546001600160a01b0319166001600160a01b0387811691821790925591518593918516917f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92591a4505050565b5f610a0282610d74565b80519091505f906001600160a01b0316336001600160a01b03161480610a38575033610a2d8461038b565b6001600160a01b0316145b80610a4a57508151610a4a9033610262565b905080610ab45760405162461bcd60e51b815260206004820152603260248201527f455243373231413a207472616e736665722063616c6c6572206973206e6f74206044820152711bdddb995c881b9bdc88185c1c1c9bdd995960721b60648201526084016103f4565b846001600160a01b0316825f01516001600160a01b031614610b275760405162461bcd60e51b815260206004820152602660248201527f455243373231413a207472616e736665722066726f6d20696e636f72726563746044820152651037bbb732b960d11b60648201526084016103f4565b6001600160a01b038416610b8b5760405162461bcd60e51b815260206004820152602560248201527f455243373231413a207472616e7366657220746f20746865207a65726f206164604482015264647265737360d81b60648201526084016103f4565b610b995f84845f015161099d565b6001600160a01b0385165f908152600460205260408120805460019290610bca9084906001600160801b03166114f5565b82546101009290920a6001600160801b038181021990931691831602179091556001600160a01b0386165f9081526004602052604081208054600194509092610c159185911661151c565b82546001600160801b039182166101009390930a9283029190920219909116179055506040805180820182526001600160a01b03808716825267ffffffffffffffff42811660208085019182525f8981526003909152948520935184549151909216600160a01b026001600160e01b03199091169190921617179055610c9c84600161153c565b5f818152600360205260409020549091506001600160a01b0316610d2b57610cc4815f541190565b15610d2b5760408051808201825284516001600160a01b03908116825260208087015167ffffffffffffffff9081168285019081525f878152600390935294909120925183549451909116600160a01b026001600160e01b03199094169116179190911790555b83856001600160a01b0316876001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60405160405180910390a4505050505050565b604080518082019091525f8082526020820152610d91825f541190565b610df05760405162461bcd60e51b815260206004820152602a60248201527f455243373231413a206f776e657220717565727920666f72206e6f6e657869736044820152693a32b73a103a37b5b2b760b11b60648201526084016103f4565b5f7f00000000000000000000000000000000000000000000000000000000000000008310610e5057610e427f00000000000000000000000000000000000000000000000000000000000000008461154f565b610e4d90600161153c565b90505b825b818110610eb9575f818152600360209081526040918290208251808401909352546001600160a01b038116808452600160a01b90910467ffffffffffffffff169183019190915215610ea657949350505050565b5080610eb181611562565b915050610e52565b5060405162461bcd60e51b815260206004820152602f60248201527f455243373231413a20756e61626c6520746f2064657465726d696e652074686560448201526e1037bbb732b91037b3103a37b5b2b760891b60648201526084016103f4565b5f6001600160a01b0384163b1561100c57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290610f5d903390899088908890600401611577565b6020604051808303815f875af1925050508015610f97575060408051601f3d908101601f19168201909252610f94918101906115b3565b60015b610ff2573d808015610fc4576040519150601f19603f3d011682016040523d82523d5f602084013e610fc9565b606091505b5080515f03610fea5760405162461bcd60e51b81526004016103f490611474565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050611010565b5060015b949350505050565b60605f611024836110a8565b60010190505f8167ffffffffffffffff811115611043576110436112f6565b6040519080825280601f01601f19166020018201604052801561106d576020820181803683370190505b5090508181016020015b5f19016f181899199a1a9b1b9c1cb0b131b232b360811b600a86061a8153600a850494508461107757509392505050565b5f8072184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b83106110e65772184f03e93ff9f4daa797ed6e38ed64bf6a1f0160401b830492506040015b6d04ee2d6d415b85acef81000000008310611112576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc10000831061113057662386f26fc10000830492506010015b6305f5e1008310611148576305f5e100830492506008015b612710831061115c57612710830492506004015b6064831061116e576064830492506002015b600a83106102f55760010192915050565b6001600160e01b031981168114611194575f80fd5b50565b5f602082840312156111a7575f80fd5b81356109968161117f565b5f5b838110156111cc5781810151838201526020016111b4565b50505f910152565b5f81518084526111eb8160208601602086016111b2565b601f01601f19169290920160200192915050565b602081525f61099660208301846111d4565b5f60208284031215611221575f80fd5b5035919050565b80356001600160a01b038116811461123e575f80fd5b919050565b5f8060408385031215611254575f80fd5b61125d83611228565b946020939093013593505050565b5f805f6060848603121561127d575f80fd5b61128684611228565b925061129460208501611228565b9150604084013590509250925092565b5f602082840312156112b4575f80fd5b61099682611228565b5f80604083850312156112ce575f80fd5b6112d783611228565b9150602083013580151581146112eb575f80fd5b809150509250929050565b634e487b7160e01b5f52604160045260245ffd5b5f805f806080858703121561131d575f80fd5b61132685611228565b935061133460208601611228565b925060408501359150606085013567ffffffffffffffff80821115611357575f80fd5b818701915087601f83011261136a575f80fd5b81358181111561137c5761137c6112f6565b604051601f8201601f19908116603f011681019083821181831017156113a4576113a46112f6565b816040528281528a60208487010111156113bc575f80fd5b826020860160208301375f60208483010152809550505050505092959194509250565b5f80604083850312156113f0575f80fd5b6113f983611228565b915061140760208401611228565b90509250929050565b600181811c9082168061142457607f821691505b60208210810361144257634e487b7160e01b5f52602260045260245ffd5b50919050565b634e487b7160e01b5f52601160045260245ffd5b5f6001820161146d5761146d611448565b5060010190565b60208082526033908201527f455243373231413a207472616e7366657220746f206e6f6e204552433732315260408201527232b1b2b4bb32b91034b6b83632b6b2b73a32b960691b606082015260800190565b5f83516114d88184602088016111b2565b8351908301906114ec8183602088016111b2565b01949350505050565b6001600160801b0382811682821603908082111561151557611515611448565b5092915050565b6001600160801b0381811683821601908082111561151557611515611448565b808201808211156102f5576102f5611448565b818103818111156102f5576102f5611448565b5f8161157057611570611448565b505f190190565b6001600160a01b03858116825284166020820152604081018390526080606082018190525f906115a9908301846111d4565b9695505050505050565b5f602082840312156115c3575f80fd5b81516109968161117f56fea264697066735822122015398cca481fda2c7cca1a1bf133217e7ece9c526c83d8548960a3d2fdaa8a3f64736f6c63430008140033";

export class ERC721A__factory extends ContractFactory {
  constructor(
    ...args: [signer: Signer] | ConstructorParameters<typeof ContractFactory>
  ) {
    if (args.length === 1) {
      super(_abi, _bytecode, args[0]);
    } else {
      super(...args);
    }
  }

  deploy(
    name_: string,
    symbol_: string,
    maxBatchSize_: BigNumberish,
    collectionSize_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC721A> {
    return super.deploy(
      name_,
      symbol_,
      maxBatchSize_,
      collectionSize_,
      overrides || {}
    ) as Promise<ERC721A>;
  }
  getDeployTransaction(
    name_: string,
    symbol_: string,
    maxBatchSize_: BigNumberish,
    collectionSize_: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(
      name_,
      symbol_,
      maxBatchSize_,
      collectionSize_,
      overrides || {}
    );
  }
  attach(address: string): ERC721A {
    return super.attach(address) as ERC721A;
  }
  connect(signer: Signer): ERC721A__factory {
    return super.connect(signer) as ERC721A__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC721AInterface {
    return new utils.Interface(_abi) as ERC721AInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC721A {
    return new Contract(address, _abi, signerOrProvider) as ERC721A;
  }
}
